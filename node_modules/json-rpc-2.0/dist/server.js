"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("./models");
var DefaultErrorCode = 0;
var createMethodNotFoundResponse = function (id) {
    return models_1.createJSONRPCErrorResponse(id, -32601 /* MethodNotFound */, "Method not found");
};
var JSONRPCServer = /** @class */ (function () {
    function JSONRPCServer() {
        this.nameToMethodDictionary = {};
    }
    JSONRPCServer.prototype.addMethod = function (name, method) {
        this.addMethodAdvanced(name, this.toJSONRPCMethod(method));
    };
    JSONRPCServer.prototype.toJSONRPCMethod = function (method) {
        return function (request) { return function (serverParams) {
            var response = method(request.params);
            if (typeof response === "function") {
                response = response(serverParams);
            }
            return Promise.resolve(response).then(function (result) { return mapResultToJSONRPCResponse(request.id, result); }, function (error) {
                console.warn("JSON-RPC method " + request.method + " responded an error", error);
                return mapErrorToJSONRPCResponse(request.id, error);
            });
        }; };
    };
    JSONRPCServer.prototype.addMethodAdvanced = function (name, method) {
        var _a;
        this.nameToMethodDictionary = __assign({}, this.nameToMethodDictionary, (_a = {}, _a[name] = method, _a));
    };
    JSONRPCServer.prototype.receive = function (request, serverParams) {
        var method = this.nameToMethodDictionary[request.method];
        if (!models_1.isJSONRPCRequest(request)) {
            var message = "Received an invalid JSON-RPC request";
            console.warn(message, request);
            return Promise.reject(new Error(message));
        }
        else if (method) {
            var response = this.callMethod(method, request, serverParams);
            return response.then(function (response) { return mapResponse(request, response); });
        }
        else if (request.id !== undefined) {
            return Promise.resolve(createMethodNotFoundResponse(request.id));
        }
        else {
            return Promise.resolve(null);
        }
    };
    JSONRPCServer.prototype.callMethod = function (method, request, serverParams) {
        var onError = function (error) {
            console.warn("An unexpected error occurred while executing \"" + request.method + "\" JSON-RPC method:", error);
            return Promise.resolve(mapErrorToJSONRPCResponse(request.id, error));
        };
        try {
            var response = method(request);
            if (typeof response === "function") {
                response = response(serverParams);
            }
            return response.then(undefined, onError);
        }
        catch (error) {
            return onError(error);
        }
    };
    return JSONRPCServer;
}());
exports.JSONRPCServer = JSONRPCServer;
var mapResultToJSONRPCResponse = function (id, result) {
    if (id !== undefined) {
        return {
            jsonrpc: models_1.JSONRPC,
            id: id,
            result: result === undefined ? null : result
        };
    }
    else {
        return null;
    }
};
var mapErrorToJSONRPCResponse = function (id, error) {
    if (id !== undefined) {
        return models_1.createJSONRPCErrorResponse(id, DefaultErrorCode, (error && error.message) || "An unexpected error occurred");
    }
    else {
        return null;
    }
};
var mapResponse = function (request, response) {
    if (response) {
        return response;
    }
    else if (request.id !== undefined) {
        return models_1.createJSONRPCErrorResponse(request.id, -32603 /* InternalError */, "Internal error");
    }
    else {
        return null;
    }
};
